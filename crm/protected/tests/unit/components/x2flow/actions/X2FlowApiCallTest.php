<?php
/*********************************************************************************
 * Copyright (C) 2011-2014 X2Engine Inc. All Rights Reserved.
 *
 * X2Engine Inc.
 * P.O. Box 66752
 * Scotts Valley, California 95067 USA
 *
 * Company website: http://www.x2engine.com
 * Community and support website: http://www.x2community.com
 *
 * X2Engine Inc. grants you a perpetual, non-exclusive, non-transferable license
 * to install and use this Software for your internal business purposes.
 * You shall not modify, distribute, license or sublicense the Software.
 * Title, ownership, and all intellectual property rights in the Software belong
 * exclusively to X2Engine.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT.
 ********************************************************************************/

Yii::import('application.components.X2Settings.*');

/**
 * @package application.tests.unit.components.x2flow.actions
 * @requires OS Linux 
 */
class X2FlowApiCallTest extends X2FlowTestBase {

    public $fixtures = array (
        'x2flow' => array ('X2Flow', '.X2FlowApiCallTest'),
        'contacts' => 'Contacts',
    );

    public static function setUpBeforeClass () {
        // replace token in flow with base 64 encoded auth info
        $template = 'fixtures/x2_flows.X2FlowApiCallTestTemplate.php';
        $file = 'fixtures/x2_flows.X2FlowApiCallTest.php';
        $username = 'admin';
        $userKey = User::model ()->findByPk (1)->userKey;
        VERBOSE_MODE && println ($userKey);
        $content = file_get_contents ($template);
        $content = preg_replace (
            '/ENCODED_AUTH_INFO/', base64_encode ($username.':'.$userKey), $content);
        VERBOSE_MODE && print ($content);
        file_put_contents ($file, $content);
        parent::setUpBeforeClass ();
    }

    public static function tearDownAfterClass () {
        parent::tearDownAfterClass();
        if(file_exists('fixtures/x2_flows.X2FlowApiCallTest.php')) {
            unlink('fixtures/x2_flows.X2FlowApiCallTest.php');
        }
    }

    public function testConstantSet () {
        // must be set to true so that api requests don't actually get made and instead the HTTP
        // message data is written to the trigger log
        $this->assertEquals (true, YII_UNIT_TESTING);
        if (!YII_UNIT_TESTING) {
            self::$skipAllTests = true;
        }
    }

    public function setOffTrigger () {
        $contact = $this->contacts ('testAnyone');
        $contact->firstName = 'not test';
        $this->assertSaves ($contact);
    }

    public function makeRequest ($httpOptions) {
        $url = $httpOptions['url'];
        unset ($httpOptions['url']);
        $this->assertTrue (
            @file_get_contents ($url, false, stream_context_create ($httpOptions)) !== false);
    }

    public function setMakeRequest ($makeRequest) {
        TestingAuxLib::setPrivateProperty ('X2FlowApiCall', '_makeRequest', $makeRequest);
    }

    /**
     * Returns the api debug message generated by the X2FlowApiCall flow action class.  Assumes that
     * The api call action is the last item in the flow and that the entire flow executed.
     * @return string 
     */
    public function getApiCallDebugMessage ($flowKey) {
        VERBOSE_MODE && print_r ($this->getTraceByFlowId ($this->x2flow ($flowKey)->id));
        $log = $this->flattenTrace ($this->getTraceByFlowId ($this->x2flow ($flowKey)->id));
        $lastEntry = array_pop ($log);
        return $lastEntry['message'];
    }

    public function testApiCallPOST () {
        $this->setMakeRequest (false);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $debugMessage = $this->getApiCallDebugMessage ('flow0');
        $this->assertEquals ('POST', $debugMessage['method']);
        $this->assertEquals (
            'paramName0=paramValue0&paramName1=paramValue1', $debugMessage['content']);
        /*$this->makeRequest ($debugMessage);

        $this->setMakeRequest (true);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $log = $this->getTraceByFlowId ($this->x2flow ('flow0')->id);
        $this->assertTrue ($this->checkTrace ($log)); */
    }   

    public function testApiCallJSONPOST () {
        $this->setMakeRequest (false);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $debugMessage = $this->getApiCallDebugMessage ('flow1');
        $this->assertEquals ('POST', $debugMessage['method']);
        $data = CJSON::encode (array (
                'paramName0' => 'paramValue0',
                'paramName1' => 'paramValue1',
            ));
        $this->assertEquals (
            $data, $debugMessage['content']);
        $this->assertEquals (
            "Content-Type: application/json\r\nContent-Length: ".strlen ($data), 
            $debugMessage['header']);
        /*$this->makeRequest ($debugMessage);

        $this->setMakeRequest (true);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $log = $this->getTraceByFlowId ($this->x2flow ('flow1')->id);
        $this->assertTrue ($this->checkTrace ($log)); */
    }   

    public function testApiCallGET () {
        $this->setMakeRequest (false);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $debugMessage = $this->getApiCallDebugMessage ('flow2');
        $this->assertEquals ('GET', $debugMessage['method']);
        $this->assertEquals (
            'http://localhost?paramName0=paramValue0&paramName1=paramValue1', $debugMessage['url']);
        /*$this->makeRequest ($debugMessage);

        $this->setMakeRequest (true);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $log = $this->getTraceByFlowId ($this->x2flow ('flow2')->id);
        $this->assertTrue ($this->checkTrace ($log)); */
    }   

    /**
     * Ensure that requests can't be made to X2Engine
     */
    public function testCallX2Api () {
        $this->setMakeRequest (true);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $log = $this->getTraceByFlowId ($this->x2flow ('flow3')->id);
        VERBOSE_MODE && print_r ($log); 
        $this->assertFalse ($this->checkTrace ($log));

        // now repeat flow without actual request to ensure at least that request was formatted
        // properly
        $this->setMakeRequest (false);
        $this->clearLogs ();
        $this->setOffTrigger ();
        $log = $this->getTraceByFlowId ($this->x2flow ('flow3')->id);
        VERBOSE_MODE && print_r ($log); 
        $this->assertTrue ($this->checkTrace ($log));
        /*$this->assertTrue ($this->checkTrace ($log)); 
        $newContact = Contacts::model ()->findByAttributes (array (
            'firstName' => 'testApiFlowAction',
            'lastName' => 'testApiFlowAction',
            'email' => 'test@test.com',
        ));
        $this->assertTrue ($newContact !== null);*/
    }
}

?>

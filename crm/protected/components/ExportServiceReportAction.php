<?php

/*********************************************************************************
 * Copyright (C) 2011-2014 X2Engine Inc. All Rights Reserved.
 *
 * X2Engine Inc.
 * P.O. Box 66752
 * Scotts Valley, California 95067 USA
 *
 * Company website: http://www.x2engine.com
 * Community and support website: http://www.x2community.com
 *
 * X2Engine Inc. grants you a perpetual, non-exclusive, non-transferable license
 * to install and use this Software for your internal business purposes.
 * You shall not modify, distribute, license or sublicense the Software.
 * Title, ownership, and all intellectual property rights in the Software belong
 * exclusively to X2Engine.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT.
 ********************************************************************************/

/* @edition:pro */

/**
 * Export a set of data generated by {@link ServicesReportAction} to a CSV file
 * via AJAX.
 */
class ExportServiceReportAction extends CAction {

    public function run(){
        $this->attachBehavior('ImportExportBehavior', array('class'=>'application.components.ImportExportBehavior'));
        $page = $_GET['page'];
        // Grab the grid view column list from the user's profile
        $gridviewSettings = json_decode(Yii::app()->params->profile->gridviewSettings, true);

        // remove x2gridview columns which don't correspond to service attributes
        $serviceColumns = array_keys($gridviewSettings['services']);
        $serviceAttrs = Services::model ()->attributeNames ();
        $serviceColumns = array_filter (
            $serviceColumns, function ($a) use ($serviceAttrs) {
                return (in_array ($a, $serviceAttrs));
            }
        );

        // The export file name is stored in the session
        $file = $_SESSION['serviceReport']['serviceReportFile'];
        $filePath = $this->safePath($file);
        $fields = X2Model::model('Services')->getFields();
        if($page == 0){ // If this is the first request, we need to add metadata
            $fp = fopen($filePath, 'w+');
            fputcsv($fp, $serviceColumns);
        }else{
            $fp = fopen($filePath, 'a+');
        }
        $fieldNames = Yii::app()->db->createCommand()
                ->select('fieldName')
                ->from('x2_fields')
                ->where('modelName="Services"')
                ->queryColumn();
        // $_GET parameters are the filters for what service data to export
        $_GET = json_decode($_SESSION['serviceReport']['GET'], true);
        $dateRange = X2DateUtil::getDateRange();
        // A date range is required for the report.
        if(isset($_GET['dateField'], $_GET['start'], $_GET['end'], $_GET['range'])){
            if(isset($_GET['sort'])){ // Sorting comes with a period in it we need to remove
                $_SESSION['servicesReportSort'] = str_replace('.', ' ', $_GET['sort']);
            }
            $dateField = $_GET['dateField'];
            $startDate = $dateRange['start'];
            $endDate = $dateRange['end'];
            // Base condition is the date range
            $attributeConditions = "($dateField BETWEEN $startDate AND $endDate)";
            $criteria = new CDbCriteria;
            // If we have attributes to filter on, we need to parse this data
            if(isset($_GET['Services'], $_GET['Services']['attribute'], $_GET['Services']['comparison'], $_GET['Services']['value'])){
                $filters = $_GET['Services'];
                // Loop through attributes
                for($i = 0; $i < count($filters['attribute']); $i++){
                    $attribute = $filters['attribute'][$i];
                    $comparison = $filters['comparison'][$i];
                    $value = $filters['value'][$i];
                    // Parse the data to be machine readable
                    foreach(X2Model::model('Services')->fields as $field){
                        if($field->fieldName == $attribute){
                            switch($field->type){
                                case 'date':
                                case 'dateTime':
                                    if(ctype_digit((string) $value) || (substr($value, 0, 1) == '-' && ctype_digit((string) substr($value, 1))))
                                        $value = (int) $value;
                                    else
                                        $value = strtotime($value);
                                    break;
                                case 'boolean':
                                case 'visibility':
                                    $value = in_array(strtolower($value), array('1', 'yes', 'y', 't', 'true')) ? 1 : 0;
                                    break;
                            }
                            break;
                        }
                    }
                    // Add criteria based on the comparison operator
                    switch($comparison){
                        case '=':
                            $criteria->compare($attribute, $value, false);
                            break;
                        case '>':
                            $criteria->compare($attribute, '>='.$value, true);
                            break;
                        case '<':
                            $criteria->compare($attribute, '<='.$value, true);
                            break;
                        case '<>': // must test for != OR is null, because both mysql and yii are stupid
                            $criteria->addCondition('('.$attribute.' IS NULL OR '.$attribute.'!='.CDbCriteria::PARAM_PREFIX.CDbCriteria::$paramCount.')');
                            $criteria->params[CDbCriteria::PARAM_PREFIX.CDbCriteria::$paramCount++] = $value;
                            break;
                        case 'notEmpty':
                            $criteria->addCondition($attribute.' IS NOT NULL AND '.$attribute.'!=""');
                            break;
                        case 'empty':
                            $criteria->addCondition('('.$attribute.'="" OR '.$attribute.' IS NULL)');
                            break;
                        case 'list':
                            $criteria->addInCondition($attribute, explode(',', $value));
                            break;
                        case 'notList':
                            $criteria->addNotInCondition($attribute, explode(',', $value));
                            break;
                        case 'noContains':
                            $criteria->compare($attribute, '<>'.$value, true);
                            break;
                        case 'contains':
                        default:
                            $criteria->compare($attribute, $value, true);
                    }
                }
                // Add this to the condition string
                $attributeConditions.=" AND ".$criteria->condition;
            }
            // We only need to select the requested columns, so create a list of them
            $serviceColumnStr=implode(', ',$serviceColumns);
            $sql = 'SELECT '.$serviceColumnStr.' FROM x2_services WHERE '.$attributeConditions;
            $count = Yii::app()->db->createCommand()
                    ->select('COUNT(*)')
                    ->from('x2_services')
                    ->where($attributeConditions, $criteria->params)
                    ->queryScalar();
            // Generate our data provider to get the records
            $dataProvider = new CSqlDataProvider($sql, array(
                        'totalItemCount' => $count,
                        'params' => $criteria->params,
                        'sort' => array(
                            'attributes' => $fieldNames,
                            'defaultOrder' => isset($_SESSION['servicesReportSort']) ? $_SESSION['servicesReportSort'] : "$dateField ASC"
                        ),
                        'pagination' => array(
                            'pageSize' => 100,
                        ),
                    ));
            // Set the current page for pagination so we can do this via AJAX
            $pg = $dataProvider->getPagination();
            $pg->setCurrentPage($page);
            $dataProvider->setPagination($pg);
            $records = $dataProvider->getData();
            $pageCount = $dataProvider->getPagination()->getPageCount();
            // Loop through the records and make their data human friendly
            foreach($records as $record){
                foreach($fields as $field){
                    if(in_array($field->fieldName, $serviceColumns)){
                        $fieldName = $field->fieldName;
                        if($field->type == 'assignment') {
                            $record[$fieldName] =  User::getUserLinks ($record[$fieldName], false);
                        }elseif($field->type == 'date' || $field->type == 'dateTime'){
                            if(is_numeric($record[$fieldName])){
                                if($field->type == 'date'){
                                    $record[$fieldName] = Formatter::formatDate($record[$fieldName]);
                                }else{
                                    $record[$fieldName] = Formatter::formatDateTime($record[$fieldName]);
                                }
                            }
                        }elseif($field->type == 'link'){
                            $nid = Fields::nameAndId($record[$fieldName]);
                            $record[$fieldName] = $nid[0];
                        }elseif($fieldName == 'visibility'){
                            $record[$fieldName] = $record[$fieldName] == 1 ? 'Public' : 'Private';
                        }
                    }
                }
                // Export record to CSV
                fputcsv($fp, $record);
            }
            unset($dataProvider);
            fclose($fp);
            if($page + 1 < $pageCount){
                // Send the next page back so we can keep AJAX exporting.
                echo $page + 1;
            }
        }
    }

}
